# Importing used libraries
import threading
import math
import random
import time
import socket
import matplotlib.pyplot as plt
from queue import Queue

# SPS (Samples Per Second)
sps = 10000  # Define the Samples Per Second for data collection (adjust as needed)

# Lists to store data for plotting
time_values = []  # Stores time values
sine_wave_values = []  # Stores sine wave amplitude values

# Fixed time window (in seconds) for the graph
time_window = 10  # Time window duration for the graph in seconds
current_time = 0  # Initialize current time
start_time = time.time()

# Define UDP settings
udp_host = "192.168.1.2"  # Replace with the target IP address
udp_port = 12345  # Choose an appropriate port number

# Queue for storing received data
data_queue = Queue()


def producer():
    while True:
        global current_time, start_time
        amplitude = random.randint(1, 10)  # Generate random amplitude value (between 1 and 10)
        frequency = random.randint(1, 10)  # Generate random frequency value (between 1 and 10)

        # To create the values for the sine wave
        current_time = time.time() - start_time
        sine_wave_value = amplitude * math.sin(2 * math.pi * frequency * current_time)

        # Send data via UDP socket
        udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        udp_socket.sendto(str(sine_wave_value).encode(), (udp_host, udp_port))
        udp_socket.close()

        time.sleep(1 / sps)  # Control the sample rate by introducing a sleep (With the sps we have it will give out
        # 10000 data per second )


def consumer():
    while time_values and time_values[0] < current_time - time_window:
        time_values.pop(0)
        sine_wave_values.pop(0)

    # Plotting the sine wave values vs time
    plt.cla()
    plt.plot(time_values, sine_wave_values, label='Sine Wave')
    plt.xlabel('Time')
    plt.ylabel('Sine Wave Value')


def udp_receiver():
    # To get the data from the UDP socket
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_socket.bind(("0.0.0.0", udp_port))

    while True:
        data, addr = udp_socket.recvfrom(1024)

        # Decoding sine wave values
        sine_wave_value = float(data.decode())

        # Append the current time and received sine wave value to the data lists
        time_values.append(current_time)
        sine_wave_values.append(sine_wave_value)
        data_queue.put(sine_wave_value)


def time_print():
    # The reason for this function is just print current time which has passed since the code has started
    while True:
        formatted_time = f"{int(current_time)} seconds"
        print(f"Elapsed time: {formatted_time}")
        time.sleep(1)


if __name__ == "__main__":
    # Create a producer thread that runs the producer() function
    producer_thread = threading.Thread(target=producer)
    producer_thread.start()

    # Create a UDP receiver thread that runs the udp_receiver() function
    udp_receiver_thread = threading.Thread(target=udp_receiver)
    udp_receiver_thread.start()

    # Create a time thread that runs the time_print() function
    time_thread = threading.Thread(target=time_print)
    time_thread.start()

    # Turn on interactive mode for Matplotlib
    plt.ion()

    # Create a figure and axis for plotting
    fig, ax = plt.subplots()

    while True:
        if not data_queue.empty():
            consumer()  # Call the consumer to update the plot when data is received
        plt.pause(0.01)  # Update the plot every 10 milliseconds
