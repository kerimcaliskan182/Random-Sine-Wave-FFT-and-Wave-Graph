# Define Constants
sps = 10  # Samples per second
time_window = 10  # Time window for data display
udp_host = "192.168.1.2"  # IP address of the UDP target
udp_port = 12345  # UDP port
max_queue_size = 500  # Maximum queue size for data storage

# Initialize Global Variables
current_time = 0  # Current time

# Import Required Libraries
import threading
import math
import random
import time
import socket
import matplotlib.pyplot as plt
from datetime import datetime
from queue import Queue
from matplotlib.animation import FuncAnimation
import numpy as np

# Define Functions

# Function to produce random sine wave data and send it via UDP
function producer():
    while True:
        amplitude = random.randint(1, 10)  # Random amplitude
        frequency = random.randint(1, 10)  # Random frequency

        sine_wave_value = amplitude * sin(2 * pi * frequency * current_time)

        # Send data via UDP
        udp_socket = create_udp_socket()
        udp_socket.sendto(encode(sine_wave_value), (udp_host, udp_port))
        udp_socket.close()

        sleep(1 / sps)

# Function to consume and process data
function consumer():
    if data_queue.size() >= sps:
        print("Consuming data")
        for i in range(data_queue.size()):
            number = data_queue.pop()
            time_values.append(current_time)
            sine_wave_values.append(number)
            current_time += 1 / sps

        plot_fft_data()

# Function to receive data via UDP
function udp_receiver():
    udp_socket = create_udp_socket()
    udp_socket.bind(("0.0.0.0", udp_port))

    while True:
        data, addr = udp_socket.recvfrom(1024)
        sine_wave_value = decode(data)

        time_values.append(current_time)
        sine_wave_values.append(sine_wave_value)
        data_queue.push(True)

# Function to print the current time
function time_print():
    while True:
        formatted_time = format_time(current_time)
        print("Current time: " + formatted_time)
        sleep(1)

# Main Program
if __name__ == "__main__":
    create_producer_thread()
    create_udp_receiver_thread()
    create_time_print_thread()

    # Turn on interactive mode for Matplotlib
    turn_on_interactive_mode()

    # Create a figure and axis for plotting
    create_plot_figure()

    while True:
        if data_queue is not empty:
            consumer()
        pause_plot_update()
